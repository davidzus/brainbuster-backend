# /docker/nginx/nginx.conf

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Backend Spring Boot (Docker container)
    upstream backend {
        server app:8080;  # Service name from compose.yml
    }

    # Frontend Vite dev server (host machine)
    upstream frontend {
        server host.docker.internal:5173;
    }

    server {
        listen 80;
        server_name localhost;

        # API endpoints - Proxy to backend container
        location /api/ {
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "http://localhost:5173" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
                add_header Access-Control-Allow-Credentials "true" always;
                return 204;
            }

            proxy_pass http://backend/api/;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            add_header Access-Control-Allow-Origin "http://localhost:5173" always;
            add_header Access-Control-Allow-Credentials "true" always;
        }

        # Frontend - Proxy to Vite dev server on host
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            
            # WebSocket for HMR
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Disable buffering for real-time updates
            proxy_buffering off;
            proxy_read_timeout 86400;
         
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }
    }
}