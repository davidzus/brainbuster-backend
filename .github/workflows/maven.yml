name: Java CI + Security

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

permissions:
  contents: read
  security-events: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B -DskipTests=false package

      - name: Upload JAR (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            **/target/*.jar
          if-no-files-found: ignore

  semgrep:
    name: Semgrep (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep and generate SARIF
        uses: returntocorp/semgrep-action@v1
        with:
          config: |
            p/java
            p/owasp-top-ten
          generateSarif: true
          publishResults: false

      - name: Upload Semgrep SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  depcheck:
    name: OWASP Dependency-Check (Vuln scan)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Use the Maven plugin (free, no login; pinned version)
      - name: OWASP Dependency-Check (Maven plugin)
        run: |
          mvn -B \
            org.owasp:dependency-check-maven:12.1.0:aggregate \
            -Dformat=HTML,JSON,XML \
            -DfailOnCVSS=7

      - name: Upload Dependency-Check reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: |
            **/dependency-check-report.* 
            **/dependency-check-report/**

  gitleaks:
    name: Gitleaks (Secrets scan)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare reports dir
        run: mkdir -p reports

      - name: Run Gitleaks (always succeed, write SARIF)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: >
            detect
            --source .
            --no-git
            --report-format sarif
            --report-path ./reports/gitleaks.sarif
            --exit-code 0

      - name: Ensure SARIF exists (create empty if none)
        run: |
          if [ ! -f ./reports/gitleaks.sarif ]; then
            cat > ./reports/gitleaks.sarif <<'JSON'
            {
              "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": { "driver": { "name": "gitleaks", "informationUri": "https://github.com/gitleaks/gitleaks", "rules": [] } },
                  "results": []
                }
              ]
            }
            JSON
          fi
          ls -lah reports
          head -n 20 ./reports/gitleaks.sarif || true

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./reports/gitleaks.sarif
